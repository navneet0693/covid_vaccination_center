<?php

/**
 * @file
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\slot_booking_customizations\CovidCenterNodeForm;
use Drupal\slot_booking_customizations\CovidCenterRegisterForm;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_pre_build().
 */
function slot_booking_customizations_views_pre_build(ViewExecutable $view) {
  $account = \Drupal::currentUser();
  /** @var \Drupal\slot_booking_customizations\SlotBookingCustomizationHelper $helper */
  $helper = \Drupal::service('slot_booking_customizations.helper');

  if ($account->isAuthenticated()
  && \Drupal::service('path.matcher')->isFrontPage()
  ) {
    // Modify contextual filters for 'frontpage' & 'other_cities' view if the
    // user is authenticated.
    // This is done in order to filter the results on the home page.
    // The results should be filtered on the basis of current users.
    if (($view->id() == 'other_cities'
      && $view->current_display == 'other_cities')
      || ($view->id() == 'frontpage'
      && $view->current_display == 'page_1')) {
      $term_id = $helper->getUserCity();
      if (!empty($term_id)) {
        // Prepare the argument.
        // Set the arguments.
        $args[0] = $term_id;
        $view->setArguments($args);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function slot_booking_customizations_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // The exposed form block contains 'Apply' button on search box.
  // This is caused due to better exposed filters and there is no option
  // in the better exposed filter settings in the view to remove this button.
  // Since, we are using search autocomplete, and it provides auto submit
  // property we don't need that action button.
  // Let's unset that action from the form.
  if ($form['#id'] === 'views-exposed-form-all-covid-center-all-covid-centers') {
    unset($form['actions']);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function slot_booking_customizations_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['node'])) {
    foreach (['default', 'edit'] as $operation) {
      // We want to customize the add/edit form for covid center.
      // This will help altering slot bookings and field_registered users.
      // Important: Please note that it is not possible change the NodeForm
      // as per bundle. So, we are doing it for whole Node entity type.
      // We are limiting the further processing in the CovidCenterNodeForm
      // itself.
      // @see CovidCenterNodeForm::class.
      $entity_types['node']->setFormClass($operation, CovidCenterNodeForm::class);
    }
  }

  if (isset($entity_types['user'])) {
    // @see CovidCenterRegisterForm::class.
    $entity_types['user']->setFormClass('register', CovidCenterRegisterForm::class);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function slot_booking_customizations_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // We have added 'field_registered_users' in full view mode of covid_center
  // node bundle as we require it's value for processing value of available
  // slots.
  // @see AvailableSlotsFormatter::viewElement().
  // So, we are hiding and unsetting it here.
  if ($entity->bundle() == 'covid_center') {
    $display->removeComponent('field_registered_users');
    unset($build["field_registered_users"]);
  }
}

/**
 * Implements hook_entity_presave().
 */
function slot_booking_customizations_entity_presave(EntityInterface $entity) {
  // A site administrator can edit user and change their covid centers.
  // So, we want to update the references in covid center (both old and new).
  // Get the user's current city selection.

  // The reason do this in hook is to get the old entity.
  // We want the old entity to compare the value of changes with
  // new entity and then update the covid centers.
  if ($entity->getEntityType()->id() == 'user') {
    $covid_center = $entity->get('field_covid_center')->getValue();
    if (!empty($covid_center)) {
      $node_id = $covid_center[0]['target_id'];

      // Load the node and check if it still exists.
      if (($node = Node::load($node_id))
        && $node instanceof NodeInterface) {

        // Get the old user object.
        $old_user_entity = $entity->original;

        // Extract the old covid center ID (node ID).
        $old_value = $old_user_entity->get('field_covid_center')->getValue();

        // Compare the old and new values.
        // If they have changed then take actions.
        if (!empty($old_nid = $old_value[0]['target_id'])
          && $node_id != $old_nid
        ) {
          // Update the 'field_registered_users' by adding the current user ID
          // to new covid center.
          $user_ids = $node->get('field_registered_users')->getValue();
          $ids = array_filter(array_column($user_ids, 'target_id'));
          if (!in_array($entity->id(), $ids)) {
            $node->get('field_registered_users')->appendItem([
              'target_id' => $entity->id(),
            ]);
            $node->save();
          }

          // We also have to remove the user reference from old covid center.
          if (($old_node = Node::load($old_nid)) instanceof NodeInterface) {
            // Update the 'field_registered_users' by adding the current user ID
            // to it.
            $field = $old_node->get('field_registered_users');
            $user_ids = $field->getValue();

            // Get the index to remove.
            $index_to_remove = array_search($entity->id(), array_column($user_ids, 'target_id'));

            // Actually remove the item.
            $field->removeItem($index_to_remove);

            // Finally save the old node.
            $old_node->save();
          }
        }
      }
    }
  }
}
